//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/DryDialog/PlayerInput/SkipToNextExpression.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SkipToNextExpression: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SkipToNextExpression()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SkipToNextExpression"",
    ""maps"": [
        {
            ""name"": ""Skip"",
            ""id"": ""4f1ce2e1-ff1e-4770-8546-9d5e7922cbaa"",
            ""actions"": [
                {
                    ""name"": ""SkipToNextExpression"",
                    ""type"": ""Button"",
                    ""id"": ""d234fc04-3b25-4cb3-9b91-d206f66496db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2aeb608-d0ae-4a20-a16d-399827c2e548"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipToNextExpression"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2be31404-87eb-4237-a362-9a2704c6b126"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipToNextExpression"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Skip
        m_Skip = asset.FindActionMap("Skip", throwIfNotFound: true);
        m_Skip_SkipToNextExpression = m_Skip.FindAction("SkipToNextExpression", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Skip
    private readonly InputActionMap m_Skip;
    private List<ISkipActions> m_SkipActionsCallbackInterfaces = new List<ISkipActions>();
    private readonly InputAction m_Skip_SkipToNextExpression;
    public struct SkipActions
    {
        private @SkipToNextExpression m_Wrapper;
        public SkipActions(@SkipToNextExpression wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipToNextExpression => m_Wrapper.m_Skip_SkipToNextExpression;
        public InputActionMap Get() { return m_Wrapper.m_Skip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkipActions set) { return set.Get(); }
        public void AddCallbacks(ISkipActions instance)
        {
            if (instance == null || m_Wrapper.m_SkipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkipActionsCallbackInterfaces.Add(instance);
            @SkipToNextExpression.started += instance.OnSkipToNextExpression;
            @SkipToNextExpression.performed += instance.OnSkipToNextExpression;
            @SkipToNextExpression.canceled += instance.OnSkipToNextExpression;
        }

        private void UnregisterCallbacks(ISkipActions instance)
        {
            @SkipToNextExpression.started -= instance.OnSkipToNextExpression;
            @SkipToNextExpression.performed -= instance.OnSkipToNextExpression;
            @SkipToNextExpression.canceled -= instance.OnSkipToNextExpression;
        }

        public void RemoveCallbacks(ISkipActions instance)
        {
            if (m_Wrapper.m_SkipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkipActions instance)
        {
            foreach (var item in m_Wrapper.m_SkipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkipActions @Skip => new SkipActions(this);
    public interface ISkipActions
    {
        void OnSkipToNextExpression(InputAction.CallbackContext context);
    }
}
